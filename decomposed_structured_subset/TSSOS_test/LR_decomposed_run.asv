%LR test 
%CSP
sos= 0;
if sos
    load('LR_120_sos.mat', 'model_dual')
    outname = 'LR120_output_uncons_sos_dual_aug.mat';
    thresh = [0, 100];
    %cones = {'dd', 'sdd', 2, 3, 5, 11, 21, 40, 'psd'};
    cones = {8, 14, 17};
    %model = model_csp;
    %model.c = -model.C;
    model_dual.c = -model_dual.C;
    support_LR(model_dual, outname, cones, thresh);

else
    CONSTRAINED = 1;
    
    if CONSTRAINED
        load('LR120_box_1_2.mat', 'model_cons_trans')
        model = model_cons_trans;      
        %outname = 'LR120_output_cons_fix_sleep.mat';
        %outname = 'LR120_output_cons_v2.mat';
        outname = 'LR120_output_cons_v2.mat';
    else
        load('LR_120.mat', 'model_unc')    
        model = model_unc;
        outname = 'LR120_output_uncons_v2.mat';
    end
    %load('LR_120.mat', 'model_unc')
    %load('LR_120.mat', 'model_c')
    %load('LR_18.mat', 'model_uncons', 'model_cons_trans')
    %res_cons_trans = load('LR120_box_1_2.mat', 'res_cons_trans');
    %
    
    
    %unconstrained: model.c = -model.c
    
    %constrained:
    
    %load('LR120_disk2_box_cons_3.mat', 'model_cons_trans')
    %load('LR_24.mat')
    %cones = {'dd', 'sdd', 2, 3, 5, 6, 11, 20, 30, 40, 'psd'};
    %cones = {'dd', 'sdd', 2, 3, 5, 6, 10, 15, 20, 'psd'};
    %cones = {'dd', 'sdd', 2, 3, 5, 6, 10, 15, 20, 30, 40, 'psd'};
    cones = {30,40};
    %cones = {3};
    %cones = {'dd', 20, 'psd'};
    %cones = {'psd'};
    %cones = {20};
    %cones = {'dd'};
    %cones = {'dd', 2, 6};
    %thresh = [0 ,10, 20];
    thresh = [0, 5, 12, 45, 100];
    %thresh = [0, 12, 45, 100];
    %thresh = [0, 5, 12, 45];
    %thresh = [0];
    %thresh = [0, 100];
    %thresh = [0, 11, 100, 10000];
    %thresh = [100];
    %thresh = [12];
    %thresh = [0];
    %model_dual_unc.c = model_dual_unc.C;
    
    
%     support_LR(model_unc, outname_unc, cones, thresh);
    %model = model_cons_trans;
    %it just gives values of zero. i don't know why, is that actually the
    %optimum?
    
    %model = model_cons_trans_dual;
    %model.c = -model.C;
    %model.c = -model.c;
    %model.A = -model.A;
    %model.b = -model.b;
    %
    %outname_c = 'LR120_box.mat';
    %outname_c = 'LR120_output_box_1_2_bonus.mat';
    %outname_c = 'LR120_output_uncons_dual_TSSOS.mat';
%    support_LR(model, outname_c, cones, thresh);
    support_LR(model, outname, cones, thresh);

end



%cones = {20};

%thresh = 100;

% figure(1)
% hold on
% model_unc = model_dual_unc;
% [N_h_unc,edges_unc] = histcounts(model_unc.K.s, 'BinMethod','integers');
%  yl_unc = [0, max(N_h_unc)];
%  %plot([11,11], yl_unc,'k--')
%  plot([100,100], yl_unc, 'k-')
%  
%  stem([1, edges_unc([N_h_unc 0] ~= 0)+0.5], [model_unc.K.l, N_h_unc(N_h_unc ~= 0)], '.', 'MarkerSize', 40)
%  title('Unconstrained CSP clique sizes', 'FontSize', 18, 'Interpreter', 'latex')
%  hold off
% xlabel('Size of Clique')
% ylabel('Number of Cliques')

% CONE0 = struct;
% [CONE0.cost, RES0, CONE0.time_solve, CONE0.time_convert] = run_model_LR(model, 'psd', 1); 
% save(outname_unc, '-append', 'CONE0', 'RES0');

function support_LR(model, outname, cones, thresh)
    Ncones = length(cones);
    Nthresh = length(thresh);

    CONE = cell(Ncones, Nthresh);
    RES  = cell(Ncones, Nthresh);

    for i = 1:Ncones
        for j = 1:Nthresh
            CONE{i,j} = struct;
            CONE{i,j}.cone = cone_list(model.K.s, thresh(j), cones{i});
        end
    end

    use_mosek = 1;

    cost = NaN*ones(Ncones, Nthresh);

    for i = 1:Ncones
        for j = 1:Nthresh
            fname = strcat(outname(1:end-4), '_', num2str(cones{i}), '_', num2str(thresh(j)), '.txt');
            [CONE{i,j}.cost, RES{i,j}, CONE{i,j}.time_solve, CONE{i,j}.time_convert]...
                = run_model_LR(model, CONE{i,j}.cone, use_mosek);              

            cost(i, j) = CONE{i,j}.cost;
                  %output
                 %{cones{i}, thresh(j), output(i,j)}
             fprintf('Cone: %s \t Thresh:  %d \t Cost: %0.3f \t \t Time Solve: %0.1f \t Time Convert: %0.1f\n', ...
                 num2str(cones{i}), thresh (j), cost(i,j), CONE{i,j}.time_solve, CONE{i,j}.time_convert)
    %         else
    %             CONE{i,j}.Hout = NaN;        
    %         end
    save(outname, 'CONE', 'cones', 'thresh')
        end
    end
end
% 
% CONE0 = struct;
% RES0 = struct;
% 
% [CONE0.Hout, RES0, CONE0.time_solve, CONE0.time_convert]...
%             = run_model_star(model, 'psd', use_mosek);
% fprintf('Cone: PSD \t Hinf: %3f\n', CONE0.Hout)
% save(outname, 'CONE', 'CONE0', 'cones', 'thresh')

